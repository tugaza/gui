#NAMESPACE=httpd

dependencies::depends "logs/logger"
dependencies::depends "http/http"

function listen(ip port) {
    logger::log "info" "listen on $port"
    if [[ ! -f /tmp/servelets ]]; then
        mkfifo /tmp/servelets
    fi
    tail -f /tmp/servelets&
    socat -T 60 TCP4-LISTEN:$port,reuseaddr,bind=$ip,fork SYSTEM:"timeout $MAX_RUN_TIME /bin/bash $DIR/servelet 2>>/tmp/servelets"
}

function ssl_listen(ip port) {
    logger::log "info" "ssl listen on $port"

    if [[ ! -f /tmp/servelets ]]; then
        mkfifo /tmp/servelets
    fi
    tail -f /tmp/servelets&

    if [[ -f /pki/certificate.pem && -f /pki/privatekey.pem ]]
    then
        cat /pki/certificate.pem /pki/privatekey.pem > /tmp/everything.pem
    fi

    socat -T 60 OPENSSL-LISTEN:$port,cert=/tmp/everything.pem,verify=0,reuseaddr,bind=$ip,fork SYSTEM:"timeout $MAX_RUN_TIME /bin/bash $DIR/servelet 2>>/tmp/servelets"
}

function servelet_start() {
    pid=$$
    logger::log "info" "worker start (pid $pid)"
    read -n 4096 -r line || this::bad_request
    logger::log "debug" "servelet: init line $(echo "scale=3; $(date +%s.%3N) - $start_time" | bc)"
    logger::log "info" "request line: $line"
    read -r REQUEST_METHOD REQUEST_URI REQUEST_HTTP_VERSION <<<"$line"
    this::validate_request "$REQUEST_METHOD" "REQUEST_URI" "REQUEST_HTTP_VERSION"
    export QUERY_STRING=`echo "$REQUEST_URI" | cut -d? -f2`

    declare -ax REQUEST_HEADERS
    logger::log "debug" "worker: checkpoints $(echo "scale=3; $(date +%s.%3N) - $start_time" | bc)"
    CONTENT_LENGTH=0
    while mapfile -t -n 1 line
    do
        line=${line%%$'\r'}
        [ -z "$line" ] && break
        REQUEST_HEADERS+=("$line")
        local header_name=`echo "$line" | cut -d\  -f1`
        if [[ $header_name == "Cookie:" ]]; then
            export HTTP_COOKIE=`echo "$line" | cut -d\  -f2-`
        fi
        if [[ $header_name == "Content-Length:" ]]; then
            CONTENT_LENGTH=`echo "$line" | cut -d\  -f2-`
        fi
    done
    logger::log "debug" "worker: read headers $(echo "scale=3; $(date +%s.%3N) - $start_time" | bc)"
    http::set_header "Status" "200 Just dandy"
    logger::log "info" "worker valid request $REQUEST_METHOD $REQUEST_URI $REQUEST_HTTP_VERSION"

    if [[ -z $CONTENT_LENGTH ]]; 
    then
        http::parse ""
    else
        BODYFILE=`mktemp`
        head -c $CONTENT_LENGTH > $BODYFILE 
        http::parse "$BODYFILE"
        rm $BODYFILE
    fi
    logger::log "debug" "worker: body parsed $(echo "scale=3; $(date +%s.%3N) - $start_time" | bc)"
    if [[ "$REQUEST_URI" == "/" || "$REQUEST_URI" =~ /\?(.*) || "$REQUEST_URI" =~ /app.sh(.*) || "$REQUEST_URI" =~ /cgi-bin(.*) ]]; then
        return
    fi

    REQUEST_URI=`echo $REQUEST_URI | sed 's/\.\.//g'` #maybe it will mitigate directory traversal?
    if [[ -f "$DIR/data$REQUEST_URI" ]]; then
        logger::log "info" "static file $REQUEST_URI"
        http::serve_file $DIR/data$REQUEST_URI
        http::output_start
        this::end
    fi

    http::set_header "Status" "404 who?"
    http::output_start
    echo "404"
    this::end
}

function validate_request(method uri version) {
    case $method in
        "GET")
            ;;
        "POST")
            ;;
        *)
            this::bad_request
            ;;
    esac
}

function bad_request() {
    http::set_header "Status" "400 Bad Request"
    http::output_start
    this::end
}

function end() {
    logger::log "info" "worker done (`http::get_set_header Status`)"
    exit 0
}